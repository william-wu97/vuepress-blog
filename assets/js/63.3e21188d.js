(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{450:function(t,s,a){"use strict";a.r(s);var e=a(1),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("本文摘自："),a("a",{attrs:{href:"https://vvbin.cn/doc-next/dep/lint.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("项目规范"),a("OutboundLink")],1)])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#介绍"}},[t._v("介绍")])]),a("li",[a("a",{attrs:{href:"#eslint"}},[t._v("ESLint")]),a("ul",[a("li",[a("a",{attrs:{href:"#手动校验代码"}},[t._v("手动校验代码")])]),a("li",[a("a",{attrs:{href:"#配置项"}},[t._v("配置项")])]),a("li",[a("a",{attrs:{href:"#编辑器配合"}},[t._v("编辑器配合")])])])]),a("li",[a("a",{attrs:{href:"#commitlint"}},[t._v("CommitLint")]),a("ul",[a("li",[a("a",{attrs:{href:"#配置"}},[t._v("配置")])]),a("li",[a("a",{attrs:{href:"#git-提交规范"}},[t._v("Git 提交规范")])]),a("li",[a("a",{attrs:{href:"#如何关闭"}},[t._v("如何关闭")])]),a("li",[a("a",{attrs:{href:"#示例"}},[t._v("示例")])])])]),a("li",[a("a",{attrs:{href:"#stylelint"}},[t._v("Stylelint")]),a("ul",[a("li",[a("a",{attrs:{href:"#配置"}},[t._v("配置")])]),a("li",[a("a",{attrs:{href:"#编辑器配合"}},[t._v("编辑器配合")])])])]),a("li",[a("a",{attrs:{href:"#prettier"}},[t._v("Prettier")]),a("ul",[a("li",[a("a",{attrs:{href:"#配置"}},[t._v("配置")])]),a("li",[a("a",{attrs:{href:"#编辑器配合"}},[t._v("编辑器配合")])])])]),a("li",[a("a",{attrs:{href:"#git-hook"}},[t._v("Git Hook")]),a("ul",[a("li",[a("a",{attrs:{href:"#husky"}},[t._v("husky")])]),a("li",[a("a",{attrs:{href:"#如何关闭"}},[t._v("如何关闭")])]),a("li",[a("a",{attrs:{href:"#如何跳过某一个检查"}},[t._v("如何跳过某一个检查")])]),a("li",[a("a",{attrs:{href:"#lint-staged"}},[t._v("lint-staged")])])])])])]),a("p"),t._v(" "),a("h1",{attrs:{id:"lint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint"}},[t._v("#")]),t._v(" Lint")]),t._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("使用 lint 的好处")])]),t._v(" "),a("p",[t._v("具备基本工程素养的同学都会注重编码规范，而代码风格检查（Code Linting，简称 Lint）是保障代码规范一致性的重要手段。")]),t._v(" "),a("p",[t._v("遵循相应的代码规范有以下好处")]),t._v(" "),a("ul",[a("li",[t._v("较少 bug 错误率")]),t._v(" "),a("li",[t._v("高效的开发效率")]),t._v(" "),a("li",[t._v("更高的可读性")])])]),t._v(" "),a("p",[t._v("项目内集成了以下几种代码校验方式")]),t._v(" "),a("ol",[a("li",[t._v("eslint 用于校验代码格式规范")]),t._v(" "),a("li",[t._v("commitlint 用于校验 git 提交信息规范")]),t._v(" "),a("li",[t._v("stylelint 用于校验 css/less 规范")]),t._v(" "),a("li",[t._v("prettier 代码格式化")])]),t._v(" "),a("blockquote",[a("p",[t._v("WARNING")]),t._v(" "),a("p",[t._v("lint 不是必须的，但是很有必要，一个项目做大了以后或者参与人员过多后，就会出现各种风格迥异的代码，对后续的维护造成了一定的麻烦")])]),t._v(" "),a("h2",{attrs:{id:"eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslint"}},[t._v("#")]),t._v(" ESLint")]),t._v(" "),a("p",[t._v("ESLint 是一个代码规范和错误检查工具，有以下几个特性")]),t._v(" "),a("ul",[a("li",[t._v("所有东西都是可以插拔的。你可以调用任意的 rule api 或者 formatter api 去打包或者定义 rule or formatter。")]),t._v(" "),a("li",[t._v("任意的 rule 都是独立的")]),t._v(" "),a("li",[t._v("没有特定的 coding style，你可以自己配置")])]),t._v(" "),a("h3",{attrs:{id:"手动校验代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动校验代码"}},[t._v("#")]),t._v(" 手动校验代码")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行下面代码.能修复的会自动修复，不能修复的需要手动修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" run lint:eslint\n")])])]),a("h3",{attrs:{id:"配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[t._v("#")]),t._v(" 配置项")]),t._v(" "),a("p",[t._v("项目的 eslint 配置位于根目录下 "),a("strong",[t._v(".eslintrc.js")]),t._v(" 内，可以根据团队自行修改代码规范")]),t._v(" "),a("h3",{attrs:{id:"编辑器配合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑器配合"}},[t._v("#")]),t._v(" 编辑器配合")]),t._v(" "),a("p",[t._v("推荐使用 vscode 进行开发，vscode 自带 eslint 插件，可以自动修改一些错误。")]),t._v(" "),a("p",[t._v("同时项目内也自带了 vscode eslint 配置，具体在 "),a("code",[t._v(".vscode/setting.json")]),t._v(" 文件夹内部。只要使用 vscode 开发不用任何设置即可使用")]),t._v(" "),a("h2",{attrs:{id:"commitlint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commitlint"}},[t._v("#")]),t._v(" CommitLint")]),t._v(" "),a("p",[t._v("在一个团队中，每个人的 git 的 commit 信息都不一样，五花八门，没有一个机制很难保证规范化，如何才能规范化呢？可能你想到的是 git 的 hook 机制，去写 shell 脚本去实现。这当然可以，其实 JavaScript 有一个很好的工具可以实现这个模板，它就是 commitlint（用于校验 git 提交信息规范）。")]),t._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("commit-lint 的配置位于项目根目录下 "),a("strong",[t._v("commitlint.config.js")])]),t._v(" "),a("h3",{attrs:{id:"git-提交规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-提交规范"}},[t._v("#")]),t._v(" Git 提交规范")]),t._v(" "),a("ul",[a("li",[t._v("参考 "),a("a",{attrs:{href:"https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue"),a("OutboundLink")],1),t._v(" 规范 ("),a("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular"),a("OutboundLink")],1),t._v(")\n"),a("ul",[a("li",[a("code",[t._v("feat")]),t._v(" 增加新功能")]),t._v(" "),a("li",[a("code",[t._v("fix")]),t._v(" 修复问题/BUG")]),t._v(" "),a("li",[a("code",[t._v("style")]),t._v(" 代码风格相关无影响运行结果的")]),t._v(" "),a("li",[a("code",[t._v("perf")]),t._v(" 优化/性能提升")]),t._v(" "),a("li",[a("code",[t._v("refactor")]),t._v(" 重构")]),t._v(" "),a("li",[a("code",[t._v("revert")]),t._v(" 撤销修改")]),t._v(" "),a("li",[a("code",[t._v("test")]),t._v(" 测试相关")]),t._v(" "),a("li",[a("code",[t._v("docs")]),t._v(" 文档/注释")]),t._v(" "),a("li",[a("code",[t._v("chore")]),t._v(" 依赖更新/脚手架配置修改等")]),t._v(" "),a("li",[a("code",[t._v("workflow")]),t._v(" 工作流改进")]),t._v(" "),a("li",[a("code",[t._v("ci")]),t._v(" 持续集成")]),t._v(" "),a("li",[a("code",[t._v("mod")]),t._v(" 不确定分类的修改")]),t._v(" "),a("li",[a("code",[t._v("wip")]),t._v(" 开发中")]),t._v(" "),a("li",[a("code",[t._v("types")]),t._v(" 类型修改")])])])]),t._v(" "),a("h3",{attrs:{id:"如何关闭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何关闭"}},[t._v("#")]),t._v(" 如何关闭")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v(".husky/commit-msg")]),t._v(" 内注释以下代码即可")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# npx --no-install commitlint --edit "$1"')]),t._v("\n")])])]),a("h3",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat(home): add home page'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"stylelint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stylelint"}},[t._v("#")]),t._v(" Stylelint")]),t._v(" "),a("p",[t._v("stylelint 用于校验项目内部 css 的风格,加上编辑器的自动修复，可以很好的统一项目内部 css 风格")]),t._v(" "),a("h3",{attrs:{id:"配置-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-2"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("stylelint 配置位于根目录下 "),a("strong",[t._v("stylelint.config.js")])]),t._v(" "),a("h3",{attrs:{id:"编辑器配合-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑器配合-2"}},[t._v("#")]),t._v(" 编辑器配合")]),t._v(" "),a("p",[t._v("如果您使用的是 vscode 编辑器的话，只需要安装下面插件，即可在保存的时候自动格式化文件内部 css 样式")]),t._v(" "),a("p",[a("strong",[t._v("插件")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint",target:"_blank",rel:"noopener noreferrer"}},[t._v("StyleLint"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"prettier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prettier"}},[t._v("#")]),t._v(" Prettier")]),t._v(" "),a("p",[t._v("prettier 可以用于统一项目代码风格，统一的缩进，单双引号，尾逗号等等风格")]),t._v(" "),a("h3",{attrs:{id:"配置-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-3"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("prettier 配置文件位于项目根目录下 "),a("strong",[t._v("prettier.config.js")])]),t._v(" "),a("h3",{attrs:{id:"编辑器配合-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑器配合-3"}},[t._v("#")]),t._v(" 编辑器配合")]),t._v(" "),a("p",[t._v("如果您使用的是 vscode 编辑器的话，只需要安装下面插件，即可在保存的时候自动格式化文件内部 js 格式")]),t._v(" "),a("p",[a("strong",[t._v("插件")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prettier"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"git-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-hook"}},[t._v("#")]),t._v(" Git Hook")]),t._v(" "),a("p",[t._v("git hook 一般结合各种 lint，在 git 提交代码的时候进行代码风格校验，如果校验没通过，则不会进行提交。需要开发者自行修改后再次进行提交")]),t._v(" "),a("h3",{attrs:{id:"husky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#husky"}},[t._v("#")]),t._v(" husky")]),t._v(" "),a("p",[t._v("有一个问题就是校验会校验全部代码，但是我们只想校验我们自己提交的代码，这个时候就可以使用 husky。")]),t._v(" "),a("p",[t._v("最有效的解决方案就是将 Lint 校验放到本地，常见做法是使用 husky 或者 pre-commit 在本地提交之前先做一次 Lint 校验。")]),t._v(" "),a("p",[t._v("项目在 "),a("code",[t._v(".husky")]),t._v(" 内部定义了相应的 hooks")]),t._v(" "),a("h3",{attrs:{id:"如何关闭-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何关闭-2"}},[t._v("#")]),t._v(" 如何关闭")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除husky依赖即可")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" remove huksy\n\n")])])]),a("h3",{attrs:{id:"如何跳过某一个检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何跳过某一个检查"}},[t._v("#")]),t._v(" 如何跳过某一个检查")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加上 --no-verify即可跳过git hook校验（--no-verify 简写为 -n）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),t._v(" --no-verify\n")])])]),a("h3",{attrs:{id:"lint-staged"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged"}},[t._v("#")]),t._v(" lint-staged")]),t._v(" "),a("p",[t._v("用于自动修复提交文件风格问题")]),t._v(" "),a("p",[t._v("lint-staged 配置位于项目 "),a("code",[t._v(".husky")]),t._v(" 目录下 "),a("strong",[t._v("lintstagedrc.js")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对指定格式文件 在提交的时候执行相应的修复命令")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.{js,jsx,ts,tsx}'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eslint --fix'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prettier --write'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{!(package)*.json,*.code-snippets,.!(browserslist)*rc}'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prettier --write--parser json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'package.json'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prettier --write'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.vue'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eslint --fix'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint --fix'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prettier --write'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git add .'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.{scss,less,styl,css,html}'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint --fix'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prettier --write'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git add .'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.md'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prettier --write'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);